= TBC: Test by Convention =

== Conventions ==

Lines beginning "prop_" are QuickCheck tests. Apply "test" to them.

Lines beginning "test_" are boolean tests (of type Bool or IO Bool or
IO () with a print statement or ...). Run them and expect the final
line of output to be "True".

Tests live in $PROJECT/Tests so test-specific hierarchical modules can
exist there.

The tests themselves must ensure the test framework (QuickCheck, etc.)
is in scope.

== Gotchas ==

Careful: don't compile the Setup.hs or GHC will build whatever is
being tested in the source dirs (and not Cabal's dist/).

- add emacs-haskell like smarts for finding the .cabal file (root of the project)
- generalise Cabal support
 - currently assumes there's a single target (only tested for 'Library')
 - doesn't make sense to run all the tests for all targets
- add an executable
 - rough semantics: run all tests below the current dir
 - need to set GHCi's current dir appropriately, ala emacs-haskell
- handle being ^C'd - kill the slave process too.
- command-line flags: verbosity, test name, ...
- include line number info
- HUnit support needs some love from someone who cares
- Hugs/etc. support needs some love from someone who cares
- FFI/etc. support needs some love from someone who cares
- add flags
  - verbosity (use Cabal's flags / datatype)
  - run a particular test file / directory
- remove the concurrency in the GHCi driver if unnecessary
- add a Sanity convention

Works now: allow it to use cabal-built objects from dist/build
... but: investigate the GHCi module header bug
 - leaving off "module T where" from the top of tests yields e.g.

not ok 13 - Tests/00_Circuits/022_xor_loop.hs:prop_correct
# <interactive>:1:5:
#     Can't find interface-file declaration for variable prop_correct
#       Probable cause: bug in .hi-boot file, or inconsistent .hi file
#       Use -ddump-if-trace to get an idea of which file caused the error
#     In the first argument of `test', namely `prop_correct'
#     In the expression: test prop_correct
#     In the definition of `it': it = test prop_correct

Figure out why this is so.

= TBC Design Desiderata =

== Nomenclature ==

"Test suite" is a tree, nodes are labelled by testgroups (directory tree)
"Testgroup" is a set of tests (guts of file)
A test is something that returns a TestResult.

"Sanity" tests the tests.

A TestFile is a compilable module, yielding a TestGroup or a TestSuite, as defined below.

Abstract type TestResult
 - skip, todo, success/failure, label, (include TestFile filename + line number)
 - and optionally an explanation (can package QC refutations here, or the SKIP/TODO stuff from TAP)
 - NB: provide HUnit interface at least

data TestResult = ok | fail | warn | ...

Abstract type TestSuiteResult
 - corresponds to directory structure, so recursive
 - leaves are TestResult
 - can render to TAP
 - can validate (isOK:: TestSuite

Desiderata

- implicit
- directory of tests in conventional place ($PROJECT/t)
- minimal boilerplate on individual test files
  - no requirement for module header (hierarchical module names screw us, tests can't be easily moved)
  - convention for "test_", "prop_" - run them as HUnit and QC props.
   - problem: if the user provides a type sig, we find the test twice.
  - if you define mainPlannedTestSuite :: (Plan Int, IO TestSuiteResult), we assume you need control and we'll run it and merge the TAP with other tests. (also mainTestSuite)
  - elsif you define mainTestGroup :: (Plan Int, IO TestGroupResult), we assume you need control and we'll run it and merge the TAP with other tests.
  - elsif you define main :: IO (), we'll treat it as a single test that's passed if it compiles and runs without an exception (?) -- quick and dirty.

- Test Classes, applying to test suites
 - climb TestSuite tree until we find TestClass.hs
 - contains vetTestSuite :: FilePath -> IO TestResult
   - provide recursive enumTests :: FilePath -> (FilePath -> IO a) -> IO a
 - this is really testing the test suite for various properties. more thought.

t/
000_sanity.hs
td/
 00_t
 01_t
 02_myCleverMainTSR.hs

000_sanity.hs:

t = sanity (\t -> grepTS "test_ && prop_" f)

sanity :: TestSuite -> IO TestResult
allTestsAreSane :: Test- > IO TestResult


CHECKED TO HERE

- consistent reporting of passing/failing tests. if we've written N tests, that should be reflected in the report, even if they're broken.
- graceful handling of uncompilable tests

- TAP compliant, so we can hook it into buildbot or whatever - no more NIH stuff

- ideally, relatively fast: this is not totally necessary, but loading every single testfile individually into ghci blows a bit.
